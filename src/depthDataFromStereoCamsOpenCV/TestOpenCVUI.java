/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package depthDataFromStereoCamsOpenCV;

import java.awt.BorderLayout;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import marvin.gui.MarvinImagePanel;
import marvin.image.MarvinImage;
import static org.opencv.calib3d.Calib3d.filterSpeckles;
import org.opencv.calib3d.StereoBM;
import org.opencv.calib3d.StereoSGBM;
import org.opencv.core.Core;
import static org.opencv.core.Core.normalize;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.highgui.Highgui;


/**
 *
 * @author Wild
 */
public class TestOpenCVUI extends javax.swing.JFrame {
    static String initialImagePath=".//camPictures//";
    int num=47130;
    String fileLeft="";//initialImagePath+"undistLeft"+num+".jpg";
    String fileRight=initialImagePath+"undistRight"+num+".jpg";
    Mat imgR = new Mat();
    Mat imgL = new Mat();
    
    
    /**
     * Creates new form TestOpenCVUI
     */
    public TestOpenCVUI() {
        initComponents();
        
    }

    public static void displayImage(Image img2, JLabel lbl)
	{   
		//source: http://answers.opencv.org/question/31505/how-load-and-display-images-with-java-using-opencv/
	    ImageIcon icon=new ImageIcon(img2);
	    lbl.setIcon(icon);
	}
  
	
	/**
	 * to display images overloaded function to take BufferedImage as argument
	 * modified from initial source http://answers.opencv.org/question/31505/how-load-and-display-images-with-java-using-opencv/
	 * @param img2 -- image to display
	 * @param str -- description of image will appear as title of image frame
	 */
	public static void displayImage(BufferedImage img2, String str)
	{   
		MarvinImagePanel	imagePanel;
		imagePanel = new MarvinImagePanel();
		
	    JFrame frame=new JFrame();
	    //frame.setLayout(new FlowLayout());        
	    frame.setSize(img2.getWidth()+10, img2.getHeight()+50);     
	    //Container l_c = new Container(); 
        //l_c.setLayout(new BorderLayout()); 
        //l_c.add(imagePanel, BorderLayout.NORTH);
	    frame.add(imagePanel, BorderLayout.CENTER);
	    frame.setVisible(true);
	    frame.setTitle(str);
	    imagePanel.setImage(new MarvinImage(img2));
	    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    

	}
	

	
	public static Mat BufferedImage2Mat(BufferedImage image){
		//source: http://stackoverflow.com/questions/18581633/fill-in-and-detect-contour-rectangles-in-java-opencv
        byte[] data = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
        Mat mat = new Mat(image.getHeight(),image.getWidth(), CvType.CV_8UC3);
        mat.put(0, 0, data);
        return mat;
    }
	

	
    public static BufferedImage Mat2BufferedImage(Mat m){
    // source: http://answers.opencv.org/question/10344/opencv-java-load-image-to-gui/
    // Fastest code
    // The output can be assigned either to a BufferedImage or to an Image

        int type = BufferedImage.TYPE_BYTE_GRAY;
        if ( m.channels() > 1 ) {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        int bufferSize = m.channels()*m.cols()*m.rows();
        byte [] b = new byte[bufferSize];
        m.get(0,0,b); // get all the pixels
        BufferedImage image = new BufferedImage(m.cols(),m.rows(), type);
        final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
        System.arraycopy(b, 0, targetPixels, 0, b.length);  
        return image;

    }
	
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jSlider1 = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSlider3 = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        jSlider4 = new javax.swing.JSlider();
        jLabel8 = new javax.swing.JLabel();
        jSlider5 = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        jSlider6 = new javax.swing.JSlider();
        jLabel10 = new javax.swing.JLabel();
        jSlider7 = new javax.swing.JSlider();
        jLabel11 = new javax.swing.JLabel();
        jSlider8 = new javax.swing.JSlider();
        jLabel12 = new javax.swing.JLabel();
        jSlider9 = new javax.swing.JSlider();
        jLabel13 = new javax.swing.JLabel();
        jSlider10 = new javax.swing.JSlider();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jFileChooser1.setDialogTitle("Please specify left and right images");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSlider1.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jSlider1.setMajorTickSpacing(2);
        jSlider1.setMaximum(99);
        jSlider1.setMinimum(1);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setValue(3);
        jSlider1.setName(""); // NOI18N
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel4.setText("SAD window size -- matched block size. It must be an odd number >=1");

        jSlider2.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jSlider2.setMajorTickSpacing(16);
        jSlider2.setMaximum(256);
        jSlider2.setMinimum(16);
        jSlider2.setMinorTickSpacing(16);
        jSlider2.setPaintLabels(true);
        jSlider2.setPaintTicks(true);
        jSlider2.setSnapToTicks(true);
        jSlider2.setToolTipText("");
        jSlider2.setValue(112);
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });

        jLabel5.setText("Number of disparities");

        System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
        jLabel1.setText("Select the Left Image");
        jTabbedPane1.addTab("Left Image", jLabel1);

        jLabel2.setText("Select the Right Image");
        jLabel2.setName(""); // NOI18N
        jTabbedPane1.addTab("Right Image", jLabel2);
        jTabbedPane1.addTab("Depth Map", jLabel3);

        jLabel6.setText("preFilterCap --  Truncation value for the prefiltered image pixels");

        jSlider3.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jSlider3.setMajorTickSpacing(5);
        jSlider3.setPaintLabels(true);
        jSlider3.setPaintTicks(true);
        jSlider3.setValue(2);
        jSlider3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider3StateChanged(evt);
            }
        });

        jLabel7.setText("minDisparity -- Minimum possible disparity value ");

        jSlider4.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jSlider4.setMajorTickSpacing(16);
        jSlider4.setMaximum(256);
        jSlider4.setPaintLabels(true);
        jSlider4.setPaintTicks(true);
        jSlider4.setSnapToTicks(true);
        jSlider4.setValue(0);
        jSlider4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider4StateChanged(evt);
            }
        });

        jLabel8.setText("uniquenessRatio -- Margin in percentage by which the computed cost function value should “win” the second best value ");

        jSlider5.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jSlider5.setMajorTickSpacing(5);
        jSlider5.setMinimum(5);
        jSlider5.setMinorTickSpacing(1);
        jSlider5.setPaintLabels(true);
        jSlider5.setPaintTicks(true);
        jSlider5.setValue(25);
        jSlider5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider5StateChanged(evt);
            }
        });

        jLabel9.setText("speckleWindowSize -- Maximum size of smooth disparity regions to consider their noise speckles and invalidate ");

        jSlider6.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jSlider6.setMajorTickSpacing(10);
        jSlider6.setMaximum(300);
        jSlider6.setMinorTickSpacing(1);
        jSlider6.setPaintLabels(true);
        jSlider6.setPaintTicks(true);
        jSlider6.setValue(200);
        jSlider6.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider6StateChanged(evt);
            }
        });

        jLabel10.setText("speckleRange -- Maximum disparity variation within each connected component");

        jSlider7.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jSlider7.setMajorTickSpacing(10);
        jSlider7.setMinorTickSpacing(1);
        jSlider7.setPaintLabels(true);
        jSlider7.setPaintTicks(true);
        jSlider7.setValue(6);
        jSlider7.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider7StateChanged(evt);
            }
        });

        jLabel11.setText("disp12MaxDiff -- Maximum allowed difference (in integer pixel units) in the left-right disparity check ");

        jSlider8.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jSlider8.setMajorTickSpacing(10);
        jSlider8.setMinimum(-1);
        jSlider8.setMinorTickSpacing(1);
        jSlider8.setPaintLabels(true);
        jSlider8.setPaintTicks(true);
        jSlider8.setValue(14);
        jSlider8.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider8StateChanged(evt);
            }
        });

        jLabel12.setText("P1 -- The first parameter controlling the disparity smoothness");

        jSlider9.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jSlider9.setMajorTickSpacing(1000);
        jSlider9.setMaximum(10000);
        jSlider9.setMinorTickSpacing(100);
        jSlider9.setPaintLabels(true);
        jSlider9.setPaintTicks(true);
        jSlider9.setValue(100);
        jSlider9.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider9StateChanged(evt);
            }
        });

        jLabel13.setText("P2 -- The second parameter controlling the disparity smoothness ");

        jSlider10.setMajorTickSpacing(1000);
        jSlider10.setMaximum(10000);
        jSlider10.setMinorTickSpacing(100);
        jSlider10.setPaintLabels(true);
        jSlider10.setPaintTicks(true);
        jSlider10.setValue(2900);
        jSlider10.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider10StateChanged(evt);
            }
        });

        jMenu2.setText("File");

        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jSlider5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSlider1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSlider4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSlider6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSlider7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSlider8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSlider9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSlider10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSlider2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSlider3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 6, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSlider10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    /**
     * 
     * @param imgL
     * @param imgR
     * @param disparity 
     */
    public void processOnSliderAction(Mat imgL, Mat imgR,Mat disparity){
        System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
        if(!imgL.empty() && !imgR.empty()){
            Core.normalize(imgL, imgL, 0, 255, 32, CvType.CV_8U);
    //
            Core.normalize(imgR, imgR, 0, 255, 32, CvType.CV_8U);

    //        StereoBM stereo = new StereoBM(StereoBM.FISH_EYE_PRESET);
//            StereoBM stereo = new StereoBM(StereoBM.BASIC_PRESET);//, 64,41);
            StereoSGBM stereo = new StereoSGBM();
            stereo.set_SADWindowSize(jSlider1.getValue());
            stereo.set_numberOfDisparities(jSlider2.getValue());
            stereo.set_preFilterCap(jSlider3.getValue());
            stereo.set_minDisparity(jSlider4.getValue());
            stereo.set_uniquenessRatio(jSlider5.getValue());
            stereo.set_speckleWindowSize(jSlider6.getValue());
            stereo.set_speckleRange(jSlider7.getValue());
            stereo.set_disp12MaxDiff(jSlider8.getValue());
            stereo.set_fullDP(false);
            stereo.set_P1(jSlider9.getValue());
            stereo.set_P2(jSlider10.getValue());

            
            
            stereo.compute(imgL, imgR, disparity);

            Mat thresholdedBinary=new Mat();
            //Filters off small noise blobs in disparity map
            filterSpeckles(disparity, 32, 25, 10);
            Core.normalize(disparity, disparity, 0, 255, 32, CvType.CV_8U);
            displayImage(Mat2BufferedImage(disparity),jLabel3);
            jLabel3.revalidate();
            jLabel3.repaint();
        }
    }
    
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            if(file.getName().contains("Left")){
                 fileLeft = file.getPath();
                 imgL  = Highgui.imread(fileLeft, Highgui.CV_LOAD_IMAGE_GRAYSCALE);
                 displayImage(Mat2BufferedImage(imgL),jLabel1);
            }
                
            if(file.getName().contains("Right")){
                fileRight = file.getPath();
                imgR  = Highgui.imread(fileRight, Highgui.CV_LOAD_IMAGE_GRAYSCALE);
                displayImage(Mat2BufferedImage(imgR),jLabel2);
            }
                
    } else {
        System.out.println("File access cancelled by user.");
    }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    final Mat disparity = new Mat();
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        // TODO add your handling code here:
        processOnSliderAction(imgL, imgR, disparity);
        disparity.setTo(new Mat(disparity.rows(), disparity.cols(), disparity.type()));
        
        //SwingUtilities.updateComponentTreeUI(this);
        
        
    }//GEN-LAST:event_jSlider1StateChanged

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        // TODO add your handling code here:
       processOnSliderAction(imgL, imgR, disparity);
        disparity.setTo(new Mat(disparity.rows(), disparity.cols(), disparity.type()));
        
        //SwingUtilities.updateComponentTreeUI(this);
        
    }//GEN-LAST:event_jSlider2StateChanged

    private void jSlider3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider3StateChanged
        // TODO add your handling code here:
        processOnSliderAction(imgL, imgR, disparity);
        disparity.setTo(new Mat(disparity.rows(), disparity.cols(), disparity.type()));
        
    }//GEN-LAST:event_jSlider3StateChanged

    private void jSlider4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider4StateChanged
        // TODO add your handling code here:
        processOnSliderAction(imgL, imgR, disparity);
        disparity.setTo(new Mat(disparity.rows(), disparity.cols(), disparity.type()));
        
    }//GEN-LAST:event_jSlider4StateChanged

    private void jSlider5StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider5StateChanged
        // TODO add your handling code here:
        processOnSliderAction(imgL, imgR, disparity);
        disparity.setTo(new Mat(disparity.rows(), disparity.cols(), disparity.type()));
        
    }//GEN-LAST:event_jSlider5StateChanged

    private void jSlider6StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider6StateChanged
        // TODO add your handling code here:
        processOnSliderAction(imgL, imgR, disparity);
        disparity.setTo(new Mat(disparity.rows(), disparity.cols(), disparity.type()));
        
    }//GEN-LAST:event_jSlider6StateChanged

    private void jSlider7StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider7StateChanged
        // TODO add your handling code here:
        processOnSliderAction(imgL, imgR, disparity);
        disparity.setTo(new Mat(disparity.rows(), disparity.cols(), disparity.type()));
        
    }//GEN-LAST:event_jSlider7StateChanged

    private void jSlider8StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider8StateChanged
        // TODO add your handling code here:
        processOnSliderAction(imgL, imgR, disparity);
        disparity.setTo(new Mat(disparity.rows(), disparity.cols(), disparity.type()));
        
    }//GEN-LAST:event_jSlider8StateChanged

    private void jSlider9StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider9StateChanged
        // TODO add your handling code here:
        processOnSliderAction(imgL, imgR, disparity);
        disparity.setTo(new Mat(disparity.rows(), disparity.cols(), disparity.type()));
        
    }//GEN-LAST:event_jSlider9StateChanged

    private void jSlider10StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider10StateChanged
        // TODO add your handling code here:
        processOnSliderAction(imgL, imgR, disparity);
        disparity.setTo(new Mat(disparity.rows(), disparity.cols(), disparity.type()));
        
    }//GEN-LAST:event_jSlider10StateChanged

    
    
    
    /**
     * @param args the command line arguments
     */
    public static  void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestOpenCVUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestOpenCVUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestOpenCVUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestOpenCVUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestOpenCVUI().setVisible(true);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider10;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JSlider jSlider3;
    private javax.swing.JSlider jSlider4;
    private javax.swing.JSlider jSlider5;
    private javax.swing.JSlider jSlider6;
    private javax.swing.JSlider jSlider7;
    private javax.swing.JSlider jSlider8;
    private javax.swing.JSlider jSlider9;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
